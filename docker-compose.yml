version: '3.8'
services:
  # MySQL 데이터베이스
  mysql:
    image: mysql:8.0
    container_name: sodamsodam-db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: sodamsodam
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - my-network

  # Redis 캐시 서버
  redis:
    image: redis:7-alpine
    container_name: sodamsodam-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - my-network

  # Spring Boot 애플리케이션
  spring:
    build: .
    container_name: sodamsodam-app
    depends_on:
      - mysql
      - redis
    environment:
      SPRING_DATASOURCE_URL: ${DB_URL}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      KAKAO_CLIENT_ID: ${KAKAO_CLIENT_ID}
      KAKAO_REDIRECT_URI: ${KAKAO_REDIRECT_URI}
      CLOUD.AWS.CREDENTIALS.ACCESS_KEY: ${MY_AWS_ACCESS_KEY}
      CLOUD.AWS.CREDENTIALS.SECRET_KEY: ${MY_AWS_SECRET_KEY}
    # 포트를 외부에 노출하지 않음 (nginx를 통해서만 접근)
    expose:
      - "8080"
    networks:
      - my-network

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: sodamsodam-nginx
    depends_on:
      - spring
    ports:
      - "80:80"      # HTTP 포트
      - "443:443"    # HTTPS 포트 (나중에 SSL 인증서 추가 시 사용)
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # 설정 파일 마운트
      # 나중에 SSL 인증서 추가 시
      # - ./ssl:/etc/nginx/ssl:ro
    networks:
      - my-network
    restart: unless-stopped

volumes:
  mysql-data:
  redis-data:

networks:
  my-network: